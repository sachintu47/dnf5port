diff --git a/CMakeLists.txt b/CMakeLists.txt
index 70eb5d3..0405b85 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -86,7 +86,7 @@ set(CMAKE_VISIBILITY_INLINES_HIDDEN ON)
 add_compile_options("-fmacro-prefix-map=${PROJECT_SOURCE_DIR}/=")
 
 # warnings
-add_compile_options(-Wall -Wextra -Werror)
+add_compile_options(-Wall -Wextra)
 add_compile_options(-Wcast-align -Wformat-nonliteral -Wmissing-format-attribute -Wredundant-decls -Wsign-compare -Wsign-conversion -Wtype-limits -Wuninitialized -Wwrite-strings)
 add_compile_options(-Werror=unused-result -Wodr)
 
diff --git a/dnf5-plugins/CMakeLists.txt b/dnf5-plugins/CMakeLists.txt
index bf3b141..c01191a 100644
--- a/dnf5-plugins/CMakeLists.txt
+++ b/dnf5-plugins/CMakeLists.txt
@@ -8,13 +8,13 @@ set(CMAKE_C_VISIBILITY_PRESET hidden)
 include_directories("${PROJECT_SOURCE_DIR}/dnf5/include/")
 # These plugins use symbols from dnf5 program, hence the symbold are undefined
 # at link time and cannot pass "-z defs" linker check. Disable the check.
-set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -Wl,-z,undefs")
+#set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -Wl,-z,undefs")
 
 add_subdirectory("automatic_plugin")
 add_subdirectory("builddep_plugin")
 add_subdirectory("changelog_plugin")
 add_subdirectory("config-manager_plugin")
 add_subdirectory("copr_plugin")
-add_subdirectory("needs_restarting_plugin")
+#add_subdirectory("needs_restarting_plugin")
 add_subdirectory("repoclosure_plugin")
 add_subdirectory("reposync_plugin")
diff --git a/dnf5-plugins/automatic_plugin/CMakeLists.txt b/dnf5-plugins/automatic_plugin/CMakeLists.txt
index d0834cb..425afe6 100644
--- a/dnf5-plugins/automatic_plugin/CMakeLists.txt
+++ b/dnf5-plugins/automatic_plugin/CMakeLists.txt
@@ -9,7 +9,7 @@ add_library(automatic_cmd_plugin MODULE ${AUTOMATIC_SOURCES})
 set_target_properties(automatic_cmd_plugin PROPERTIES PREFIX "")
 
 target_link_libraries(automatic_cmd_plugin PRIVATE libdnf5 libdnf5-cli)
-target_link_libraries(automatic_cmd_plugin PRIVATE dnf5)
+target_link_libraries(automatic_cmd_plugin PRIVATE dnf5_core)
 
 install(TARGETS automatic_cmd_plugin LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}/dnf5/plugins/)
 install(DIRECTORY "config/usr/" DESTINATION "${CMAKE_INSTALL_PREFIX}")
diff --git a/dnf5-plugins/automatic_plugin/automatic.cpp b/dnf5-plugins/automatic_plugin/automatic.cpp
index 020ec26..f4e7d44 100644
--- a/dnf5-plugins/automatic_plugin/automatic.cpp
+++ b/dnf5-plugins/automatic_plugin/automatic.cpp
@@ -45,6 +45,49 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include <string>
 #include <thread>
 
+
+#if defined(__MVS__)
+static FILE *memstream_open(char **out_buf, size_t *out_len) {
+    if (!out_buf || !out_len) { errno = EINVAL; return NULL; }
+
+    char tmpl[] = "/tmp/memstream.XXXXXX";
+    int fd = mkstemp(tmpl);
+    if (fd == -1) return NULL;
+
+    unlink(tmpl);
+
+    FILE *fp = fdopen(fd, "w+");
+    if (!fp) { close(fd); return NULL; }
+
+    *out_buf = NULL;
+    *out_len = 0;
+    return fp;
+}
+
+static int memstream_finish(FILE *fp, char **out_buf, size_t *out_len) {
+    if (!fp || !out_buf || !out_len) { errno = EINVAL; return -1; }
+
+    if (fflush(fp) != 0) return -1;
+
+    long end = ftell(fp);
+    if (end < 0) return -1;
+
+    if (fseek(fp, 0, SEEK_SET) != 0) return -1;
+
+    char *buf = (char *)malloc((size_t)end + 1);
+    if (!buf) return -1;
+
+    size_t got = fread(buf, 1, (size_t)end, fp);
+    if (got != (size_t)end) { free(buf); return -1; }
+
+    buf[got] = '\0';
+    *out_buf = buf;
+    *out_len = got;
+    return 0;
+}
+
+#endif
+
 namespace {
 
 /// Sleep for random number of seconds in interval <0, max_value>
@@ -360,7 +403,11 @@ void AutomaticCommand::run() {
         if (!transaction.empty()) {
             char * tt_string;
             size_t size;
+#ifdef __MVS__
+            auto * fd = memstream_open(&tt_string, &size);
+#else
             auto * fd = open_memstream(&tt_string, &size);
+#endif
             {
                 libdnf5::cli::output::TransactionTable table(
                     static_cast<libdnf5::cli::output::ITransaction &>(cli_output_transaction));
@@ -370,6 +417,9 @@ void AutomaticCommand::run() {
                 table.print_table();
                 table.print_summary();
             }
+#ifdef __MVS__
+            memstream_finish(fd, &tt_string, &size);
+#endif
             fclose(fd);
             output_stream << tt_string;
             free(tt_string);
diff --git a/dnf5-plugins/automatic_plugin/config_automatic.cpp b/dnf5-plugins/automatic_plugin/config_automatic.cpp
index 316fb70..733df1c 100644
--- a/dnf5-plugins/automatic_plugin/config_automatic.cpp
+++ b/dnf5-plugins/automatic_plugin/config_automatic.cpp
@@ -23,6 +23,8 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 
 #include <cstdlib>
 
+#define HOST_NAME_MAX _POSIX_HOST_NAME_MAX
+
 namespace dnf5 {
 
 void ConfigAutomatic::load_from_parser(
diff --git a/dnf5-plugins/automatic_plugin/emitters.cpp b/dnf5-plugins/automatic_plugin/emitters.cpp
index 3965ec4..bf7c6dc 100644
--- a/dnf5-plugins/automatic_plugin/emitters.cpp
+++ b/dnf5-plugins/automatic_plugin/emitters.cpp
@@ -33,6 +33,33 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include <iomanip>
 #include <iostream>
 
+#ifdef __MVS__
+FILE *fmemopen(void *buf, size_t size, const char *mode) {
+    char temp[] = "/tmp/zmemXXXXXX";  // mkstemp-compatible
+    int fd = mkstemp(temp);
+    if (fd == -1)
+        return NULL;
+
+    unlink(temp);
+
+    FILE *fp = fdopen(fd, "w+b");
+    if (!fp) {
+        close(fd);
+        return NULL;
+    }
+
+    if (buf && size && (strchr(mode, 'r') || strchr(mode, '+'))) {
+        if (fwrite(buf, 1, size, fp) != size) {
+            fclose(fp);
+            return NULL;
+        }
+        rewind(fp);
+    }
+
+    return fp;
+}
+#endif
+
 namespace dnf5 {
 
 constexpr const char * MOTD_FILENAME = "/etc/motd.d/dnf5-automatic";
diff --git a/dnf5-plugins/builddep_plugin/CMakeLists.txt b/dnf5-plugins/builddep_plugin/CMakeLists.txt
index b8640e1..018afda 100644
--- a/dnf5-plugins/builddep_plugin/CMakeLists.txt
+++ b/dnf5-plugins/builddep_plugin/CMakeLists.txt
@@ -7,7 +7,7 @@ add_library(builddep_cmd_plugin MODULE builddep.cpp builddep_cmd_plugin.cpp)
 # disable the 'lib' prefix in order to create builddep_cmd_plugin.so
 set_target_properties(builddep_cmd_plugin PROPERTIES PREFIX "")
 
-find_library(RPMBUILD NAMES rpmbuild REQUIRED)
+find_library(RPMBUILD NAMES librpmbuild REQUIRED)
 target_link_libraries(builddep_cmd_plugin PRIVATE ${RPMBUILD})
 
 pkg_check_modules(RPM REQUIRED rpm)
@@ -15,7 +15,7 @@ target_link_libraries(builddep_cmd_plugin PRIVATE ${RPM_LIBRARIES})
 
 target_link_libraries(builddep_cmd_plugin PRIVATE common_obj)
 target_link_libraries(builddep_cmd_plugin PRIVATE libdnf5 libdnf5-cli)
-target_link_libraries(builddep_cmd_plugin PRIVATE dnf5)
+target_link_libraries(builddep_cmd_plugin PRIVATE dnf5_core)
 
 install(TARGETS builddep_cmd_plugin LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}/dnf5/plugins/)
 
diff --git a/dnf5-plugins/changelog_plugin/CMakeLists.txt b/dnf5-plugins/changelog_plugin/CMakeLists.txt
index 9b4a553..c02ae2f 100644
--- a/dnf5-plugins/changelog_plugin/CMakeLists.txt
+++ b/dnf5-plugins/changelog_plugin/CMakeLists.txt
@@ -8,7 +8,7 @@ add_library(changelog_cmd_plugin MODULE changelog.cpp changelog_cmd_plugin.cpp)
 set_target_properties(changelog_cmd_plugin PROPERTIES PREFIX "")
 
 target_link_libraries(changelog_cmd_plugin PRIVATE libdnf5 libdnf5-cli)
-target_link_libraries(changelog_cmd_plugin PRIVATE dnf5)
+target_link_libraries(changelog_cmd_plugin PRIVATE dnf5_core)
 
 install(TARGETS changelog_cmd_plugin LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}/dnf5/plugins/)
 
diff --git a/dnf5-plugins/config-manager_plugin/CMakeLists.txt b/dnf5-plugins/config-manager_plugin/CMakeLists.txt
index da04603..3785642 100644
--- a/dnf5-plugins/config-manager_plugin/CMakeLists.txt
+++ b/dnf5-plugins/config-manager_plugin/CMakeLists.txt
@@ -18,7 +18,7 @@ find_package(ZLIB REQUIRED)
 
 target_link_libraries(config-manager_cmd_plugin PRIVATE ZLIB::ZLIB)
 target_link_libraries(config-manager_cmd_plugin PRIVATE libdnf5 libdnf5-cli)
-target_link_libraries(config-manager_cmd_plugin PRIVATE dnf5)
+target_link_libraries(config-manager_cmd_plugin PRIVATE dnf5_core)
 
 install(TARGETS config-manager_cmd_plugin LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}/dnf5/plugins/)
 
diff --git a/dnf5-plugins/copr_plugin/CMakeLists.txt b/dnf5-plugins/copr_plugin/CMakeLists.txt
index c3829fe..b604023 100644
--- a/dnf5-plugins/copr_plugin/CMakeLists.txt
+++ b/dnf5-plugins/copr_plugin/CMakeLists.txt
@@ -13,7 +13,7 @@ include_directories(${JSONC_INCLUDE_DIRS})
 target_link_libraries(copr_cmd_plugin PRIVATE ${JSONC_LIBRARIES})
 
 target_link_libraries(copr_cmd_plugin PRIVATE libdnf5 libdnf5-cli)
-target_link_libraries(copr_cmd_plugin PRIVATE dnf5)
+target_link_libraries(copr_cmd_plugin PRIVATE dnf5_core)
 
 install(TARGETS copr_cmd_plugin LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}/dnf5/plugins/)
 
diff --git a/dnf5-plugins/needs_restarting_plugin/CMakeLists.txt b/dnf5-plugins/needs_restarting_plugin/CMakeLists.txt
index cf29014..3caafda 100644
--- a/dnf5-plugins/needs_restarting_plugin/CMakeLists.txt
+++ b/dnf5-plugins/needs_restarting_plugin/CMakeLists.txt
@@ -9,7 +9,7 @@ set_target_properties(needs_restarting_cmd_plugin PROPERTIES PREFIX "")
 
 include(sdbus_cpp)
 
-target_link_libraries(needs_restarting_cmd_plugin PRIVATE dnf5 libdnf5 libdnf5-cli ${SDBUS_CPP_LIBRARIES})
+target_link_libraries(needs_restarting_cmd_plugin PRIVATE dnf5_core libdnf5 libdnf5-cli ${SDBUS_CPP_LIBRARIES})
 
 install(TARGETS needs_restarting_cmd_plugin LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}/dnf5/plugins/)
 
diff --git a/dnf5-plugins/repoclosure_plugin/CMakeLists.txt b/dnf5-plugins/repoclosure_plugin/CMakeLists.txt
index 119a211..2691a15 100644
--- a/dnf5-plugins/repoclosure_plugin/CMakeLists.txt
+++ b/dnf5-plugins/repoclosure_plugin/CMakeLists.txt
@@ -8,7 +8,7 @@ add_library(repoclosure_cmd_plugin MODULE repoclosure.cpp repoclosure_cmd_plugin
 set_target_properties(repoclosure_cmd_plugin PROPERTIES PREFIX "")
 
 target_link_libraries(repoclosure_cmd_plugin PRIVATE libdnf5 libdnf5-cli)
-target_link_libraries(repoclosure_cmd_plugin PRIVATE dnf5)
+target_link_libraries(repoclosure_cmd_plugin PRIVATE dnf5_core)
 
 install(TARGETS repoclosure_cmd_plugin LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}/dnf5/plugins/)
 
diff --git a/dnf5-plugins/reposync_plugin/CMakeLists.txt b/dnf5-plugins/reposync_plugin/CMakeLists.txt
index 7e3f7c1..6e3ac31 100644
--- a/dnf5-plugins/reposync_plugin/CMakeLists.txt
+++ b/dnf5-plugins/reposync_plugin/CMakeLists.txt
@@ -8,7 +8,7 @@ add_library(reposync_cmd_plugin MODULE reposync.cpp reposync_cmd_plugin.cpp)
 set_target_properties(reposync_cmd_plugin PROPERTIES PREFIX "")
 
 target_link_libraries(reposync_cmd_plugin PRIVATE libdnf5 libdnf5-cli)
-target_link_libraries(reposync_cmd_plugin PRIVATE dnf5)
+target_link_libraries(reposync_cmd_plugin PRIVATE dnf5_core)
 
 install(TARGETS reposync_cmd_plugin LIBRARY DESTINATION ${CMAKE_INSTALL_FULL_LIBDIR}/dnf5/plugins/)
 install(DIRECTORY "config/usr/" DESTINATION "${CMAKE_INSTALL_PREFIX}")
diff --git a/dnf5/CMakeLists.txt b/dnf5/CMakeLists.txt
index d1438d3..d84c83e 100644
--- a/dnf5/CMakeLists.txt
+++ b/dnf5/CMakeLists.txt
@@ -35,11 +35,17 @@ include_directories(.)
 add_executable(dnf5 ${DNF5_SOURCES})
 
 # Enable symbol export. Needed for loadable modules (dnf5 plugins).
-set_property(TARGET dnf5 PROPERTY ENABLE_EXPORTS 1)
+#set_property(TARGET dnf5 PROPERTY ENABLE_EXPORTS 1)
 # Export only explicitly marked symbols.
 set_target_properties(dnf5 PROPERTIES C_VISIBILITY_PRESET hidden CXX_VISIBILITY_PRESET hidden)
-
 target_link_libraries(dnf5 PRIVATE common_obj libdnf5 libdnf5-cli Threads::Threads)
+
+# Build a separate shared library from the same sources
+add_library(dnf5_core SHARED ${DNF5_SOURCES})
+set_target_properties(dnf5_core PROPERTIES OUTPUT_NAME "dnf5_core")
+target_compile_options(dnf5_core PRIVATE -fvisibility=default)
+target_link_libraries(dnf5_core PRIVATE common_obj libdnf5 libdnf5-cli Threads::Threads)
+
 install(TARGETS dnf5 RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
 
 pkg_check_modules(RPM REQUIRED rpm>=4.17.0)
diff --git a/dnf5/commands/offline/offline.cpp b/dnf5/commands/offline/offline.cpp
index a32dbc1..a70c122 100644
--- a/dnf5/commands/offline/offline.cpp
+++ b/dnf5/commands/offline/offline.cpp
@@ -47,6 +47,8 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include <iostream>
 #include <string>
 
+#include <zos-filesystem.h>
+
 using namespace libdnf5::cli;
 
 const std::string & ID_TO_IDENTIFY_BOOTS = libdnf5::offline::OFFLINE_STARTED_ID;
@@ -288,7 +290,7 @@ void clean_datadir(Context & ctx, const std::filesystem::path & datadir) {
     ctx.get_base().get_logger()->info("Cleaning up downloaded data...");
 
     for (const auto & entry : std::filesystem::directory_iterator(datadir)) {
-        std::filesystem::remove_all(entry.path());
+	portable_remove_all(entry.path());
     }
 }
 
diff --git a/dnf5/context.cpp b/dnf5/context.cpp
index 9986849..6d7099c 100644
--- a/dnf5/context.cpp
+++ b/dnf5/context.cpp
@@ -52,6 +52,8 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include <tuple>
 #include <utility>
 
+#include <zos-filesystem.h>
+
 namespace fs = std::filesystem;
 
 namespace dnf5 {
@@ -447,8 +449,8 @@ void Context::Impl::download_and_run(libdnf5::base::Transaction & transaction) {
                 _("Location \"{}\" already contains a stored transaction, it will be overwritten."),
                 transaction_store_path.string()));
             if (libdnf5::cli::utils::userconfirm::userconfirm(base.get_config())) {
-                std::filesystem::remove_all(packages_location);
-                std::filesystem::remove_all(comps_location);
+                portable_remove_all(packages_location);
+                portable_remove_all(comps_location);
             } else {
                 throw libdnf5::cli::AbortedByUserError();
             }
diff --git a/libdnf5-cli/CMakeLists.txt b/libdnf5-cli/CMakeLists.txt
index ba92d79..434085e 100644
--- a/libdnf5-cli/CMakeLists.txt
+++ b/libdnf5-cli/CMakeLists.txt
@@ -28,7 +28,7 @@ list(APPEND LIBDNF5_CLI_PC_REQUIRES_PRIVATE)
 include_directories(.)
 
 # build libdnf5-cli.so
-add_library(libdnf5-cli SHARED ${LIBDNF5_CLI_SOURCES})
+add_library(libdnf5-cli STATIC ${LIBDNF5_CLI_SOURCES})
 set(DNF_CLI_SO_VERSION 2)
 set_target_properties(libdnf5-cli PROPERTIES OUTPUT_NAME "dnf5-cli")
 set_target_properties(libdnf5-cli PROPERTIES SOVERSION ${DNF_CLI_SO_VERSION})
diff --git a/libdnf5-cli/output/transactioninfo.cpp b/libdnf5-cli/output/transactioninfo.cpp
index 276f741..c9749c5 100644
--- a/libdnf5-cli/output/transactioninfo.cpp
+++ b/libdnf5-cli/output/transactioninfo.cpp
@@ -42,6 +42,7 @@ std::string generate_user_info_str(uint32_t user_id) {
         return results;
     };
 
+#ifndef __MVS__
     // If gecos information does exists, it is generally CSV formatted.
     // This section assumes that the first entry in the gecos information is the display name.
     if (user_info->pw_gecos && strlen(user_info->pw_gecos) > 0) {
@@ -50,7 +51,7 @@ std::string generate_user_info_str(uint32_t user_id) {
         std::getline(s_stream, display_name, ',');
         results += fmt::format(" {}", display_name);
     };
-
+#endif
     if (user_info->pw_name && strlen(user_info->pw_name) > 0) {
         results += fmt::format(" <{}>", user_info->pw_name);
     };
diff --git a/libdnf5-cli/progressbar/progress_bar.cpp b/libdnf5-cli/progressbar/progress_bar.cpp
index 99cb44d..764fc46 100644
--- a/libdnf5-cli/progressbar/progress_bar.cpp
+++ b/libdnf5-cli/progressbar/progress_bar.cpp
@@ -100,7 +100,7 @@ void ProgressBar::update() {
         percent_done = static_cast<int32_t>(static_cast<float>(ticks) / static_cast<float>(total_ticks) * 100);
     }
 
-    auto now = std::chrono::high_resolution_clock::now();
+    auto now = std::chrono::system_clock::now();
 
     // compute the current speed (ticks per second)
     auto delta = now - current_speed_window_start;
diff --git a/libdnf5-plugins/CMakeLists.txt b/libdnf5-plugins/CMakeLists.txt
index c8100a8..4c65d5d 100644
--- a/libdnf5-plugins/CMakeLists.txt
+++ b/libdnf5-plugins/CMakeLists.txt
@@ -1,5 +1,5 @@
-set(CMAKE_CXX_VISIBILITY_PRESET hidden)
-set(CMAKE_C_VISIBILITY_PRESET hidden)
+#set(CMAKE_CXX_VISIBILITY_PRESET hidden)
+#set(CMAKE_C_VISIBILITY_PRESET hidden)
 
 add_subdirectory("actions")
 add_subdirectory("appstream")
diff --git a/libdnf5/CMakeLists.txt b/libdnf5/CMakeLists.txt
index 257a248..fa9a195 100644
--- a/libdnf5/CMakeLists.txt
+++ b/libdnf5/CMakeLists.txt
@@ -41,7 +41,7 @@ add_library(libdnf5_iface INTERFACE)
 target_link_libraries(libdnf5_iface INTERFACE libdnf5_obj $<TARGET_OBJECTS:libdnf5_obj>)
 
 # build libdnf5.so
-add_library(libdnf5 SHARED $<TARGET_OBJECTS:libdnf5_obj>)
+add_library(libdnf5 STATIC $<TARGET_OBJECTS:libdnf5_obj>)
 set(DNF_SO_VERSION 2)
 set_target_properties(libdnf5 PROPERTIES OUTPUT_NAME "dnf5")
 set_target_properties(libdnf5 PROPERTIES SOVERSION ${DNF_SO_VERSION})
diff --git a/libdnf5/conf/config_utils.cpp b/libdnf5/conf/config_utils.cpp
index 68037ab..07561e2 100644
--- a/libdnf5/conf/config_utils.cpp
+++ b/libdnf5/conf/config_utils.cpp
@@ -23,6 +23,7 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 
 #include <glob.h>
 
+#include <sstream>
 
 namespace libdnf5 {
 
diff --git a/libdnf5/conf/vars.cpp b/libdnf5/conf/vars.cpp
index 8e9e0ed..c2269b8 100644
--- a/libdnf5/conf/vars.cpp
+++ b/libdnf5/conf/vars.cpp
@@ -34,7 +34,7 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include <rpm/rpmmacro.h>
 #include <rpm/rpmts.h>
 #include <stdlib.h>
-#include <sys/auxv.h>
+//#include <sys/auxv.h>
 #include <sys/types.h>
 #include <sys/utsname.h>
 
diff --git a/libdnf5/repo/repo_downloader.cpp b/libdnf5/repo/repo_downloader.cpp
index 304066c..0d5e80f 100644
--- a/libdnf5/repo/repo_downloader.cpp
+++ b/libdnf5/repo/repo_downloader.cpp
@@ -38,6 +38,8 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include <fstream>
 #include <random>
 
+#include <zos-filesystem.h>
+
 #define RECOGNIZED_CHKSUMS {"sha512", "sha256"}
 
 namespace libdnf5::repo {
@@ -73,7 +75,7 @@ int RepoDownloader::end_cb_full_download(void * data, LrTransferStatus status, c
             auto tmp_item = dir.path();
 
             auto target_item = download_callback_data->destination / tmp_item.filename();
-            std::filesystem::remove_all(target_item);
+            portable_remove_all(target_item);
 
             utils::fs::move_recursive(tmp_item, target_item);
         }
diff --git a/libdnf5/utils/fs/temp.cpp b/libdnf5/utils/fs/temp.cpp
index daa6d25..8a23a0e 100644
--- a/libdnf5/utils/fs/temp.cpp
+++ b/libdnf5/utils/fs/temp.cpp
@@ -25,6 +25,7 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include <libdnf5/utils/bgettext/bgettext-mark-domain.h>
 #include <unistd.h>
 
+#include <zos-filesystem.h>
 
 namespace libdnf5::utils::fs {
 
@@ -62,7 +63,7 @@ TempDir & TempDir::operator=(TempDir && src) noexcept {
 TempDir::~TempDir() {
     try {
         if (!path.empty()) {
-            std::filesystem::remove_all(path);
+            portable_remove_all(path);
         }
     } catch (std::exception &) {
         // catch an exception that shouldn't be raised in a destructor
diff --git a/libdnf5/utils/fs/utils.cpp b/libdnf5/utils/fs/utils.cpp
index 3c858f2..a35bf5c 100644
--- a/libdnf5/utils/fs/utils.cpp
+++ b/libdnf5/utils/fs/utils.cpp
@@ -26,6 +26,8 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include <algorithm>
 #include <cstring>
 
+#include <zos-filesystem.h>
+
 namespace libdnf5::utils::fs {
 
 namespace stdfs = std::filesystem;
@@ -81,7 +83,7 @@ void move_recursive(const std::filesystem::path & src, const std::filesystem::pa
         std::filesystem::rename(src, dest);
     } catch (const std::filesystem::filesystem_error &) {
         std::filesystem::copy(src, dest, std::filesystem::copy_options::recursive);
-        std::filesystem::remove_all(src);
+        portable_remove_all(src);
     }
 }
 
diff --git a/libdnf5/utils/library.cpp b/libdnf5/utils/library.cpp
index b2a5052..e864d8b 100644
--- a/libdnf5/utils/library.cpp
+++ b/libdnf5/utils/library.cpp
@@ -23,6 +23,8 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 
 #include <dlfcn.h>
 
+#define RTLD_NODELETE 0
+
 namespace libdnf5::utils {
 
 Library::Library(const std::string & path) : path(path) {
diff --git a/libdnf5/utils/system.cpp b/libdnf5/utils/system.cpp
index 89c1130..a2a2a3d 100644
--- a/libdnf5/utils/system.cpp
+++ b/libdnf5/utils/system.cpp
@@ -22,7 +22,7 @@ along with libdnf.  If not, see <https://www.gnu.org/licenses/>.
 #include <libdnf5/common/exception.hpp>
 #include <libdnf5/utils/bgettext/bgettext-mark-domain.h>
 #include <rpm/rpmlib.h>
-#include <sys/auxv.h>
+//#include <sys/auxv.h>
 #include <sys/utsname.h>
 
 namespace libdnf5::utils {
@@ -52,6 +52,7 @@ std::string detect_arch() {
         throw RuntimeError(M_("Failed to execute uname()"));
     }
 
+#ifndef __MVS__
     if (!strncmp(un.machine, "armv", 4)) {
         /* un.machine is armvXE, where X is version number and E is
          * endianness (b or l); we need to add modifiers such as
@@ -69,6 +70,7 @@ std::string detect_arch() {
         *modifier++ = endian;
         *modifier = 0;
     }
+#endif
 #ifdef __MIPSEL__
     // support for little endian MIPS
     if (!strcmp(un.machine, "mips"))
